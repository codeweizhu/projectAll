
//- 此為範例 請勿import 若已熟悉，請刪除此檔，以免搜尋時搜到，這樣會很麻煩。


// 定義一個Sass函數 vw($target) 用於計算vw (viewport width) 單位的數值
@function vw($target) {
  // 1 vw is equal to 1% of the viewport width
  // 設定一個變數 $vw-context，代表1vw相對於螢幕寬度的像素數
  $vw-context: ($pcrwd-breakpoint * .01) * 1px; // 1% viewport width
  // 使用給定的 $target 和 $vw-context，計算出對應的vw數值
  @return ($target / $vw-context) * 1vw;
}

//- 範例
// 引入或定義 breakpoint 變數
$pcrwd-breakpoint: 1024;

// 使用 vw 函數將像素轉換為 vw 單位
.element {
  width: vw(200); // 將200像素轉換為vw，假設螢幕寬度是 $pcrwd-breakpoint，這樣會是200/1024 => 19.53125vw
}

//- 產出CSS
.element {
  width: 19.53125vw;
}

// 定義一個Sass函數 vwm($target) 用於計算vw (viewport width) 單位的數值
@function vwm($target) {
  // 1 vw is equal to 1% of the viewport width
  // 設定一個變數 $vw-context，代表1vw相對於螢幕寬度的像素數
  $vw-context: ($mblrwd-breakpoint * .01) * 1px; // 1% viewport width
  // 使用給定的 $target 和 $vw-context，計算出對應的vw數值
  @return ($target / $vw-context) * 1vw;
}

//- 範例
// 引入或定義 breakpoint 變數
$mblrwd-breakpoint: 768;

// 使用 vwm 函數將像素轉換為 vw 單位，並使用不同的 breakpoint 變數
.element {
  width: vwm(200); // 將200像素轉換為vw，假設螢幕寬度是 $mblrwd-breakpoint, 這樣答案會是 200/768=26.04vw
}

// 產出CSS
.element {
  width: 26.04167vw;
}

// 定義一個Sass函數 xy($xy, $ttlw) 用於計算相對於總寬度的百分比（例如，x/y座標）
@function xy($xy, $ttlw) {
  // 使用給定的 $xy 和 $ttlw，計算出相對於總寬度的百分比值
  @return ($xy / $ttlw * 100%);
}

//- 範例
.element {
  width: xy(50, 1000); // 計算50相對於1000的百分比，結果為 5%
}

//- 產出CSS
.element {
  width: 5%;
}

// 定義一個Sass函數 px-em($px, $base:16) 用於將像素值轉換為em單位，可選地指定基礎字體大小（預設為16px）
@function px-em($px, $base: 16) {
  // 使用給定的 $px 和 $base，計算出對應的em數值
  @return ($px / $base * 1em);
}

//- 範例
.element {
  font-size: px-em(16); // 將16像素轉換為em，假設基礎字體大小是 16px，結果為 1em
}

//- 產出CSS
.element {
  font-size: 1em;
}


// 定義一個名為 breakpoint 的 Sass mixin，用於生成media query
// $breakpoints 參數可以是數字（以像素為單位）或 breakpoint 名稱（例如 'sm'）
@mixin breakpoint($breakpoints) {
  // 如果 $breakpoints 是數字，則生成 max-width media query
  @if type_of($breakpoints) == number {
    @media (max-width: ($breakpoints + px)) {
      @content;
    }
  }
  // 否則，根據指定的 breakpoint 名稱查找對應的像素值
  @else {
    $breakpoint: map-get($grid-breakpoints, $breakpoints);
    // 如果找到 breakpoint 值且大於1，則生成 max-width media query
    @if $breakpoint > 1 {
      @media (max-width: ($breakpoint - 1px)) {
        @content;
      }
    }
  }
}

//- 範例
// 使用 breakpoint mixin 來生成media query
@include breakpoint(768px) {
  // 在螢幕寬度小於768像素時應用以下樣式
  .element {
    font-size: 16px;
  }
}
//-產出CSS
@media (max-width: 767px) {
  .element {
    font-size: 16px;
  }
}

// 定義一個名為 bp 的 Sass mixin，用於簡化生成特定設備的media query
// $device 參數可以是 'pc' 或 'mb'，分別代表desktop和mobile
@mixin bp($device: 'pc') {
  @if $device == 'pc' {
    // 生成desktop用的media query
    @media (max-width: (($pcrwd-breakpoint) * 1px)) {
      @content;
    }
  } @else if $device == 'mb' {
    // 生成mobile用的media query
    @media (max-width: (($mblrwd-breakpoint) * 1px)) {
      @content;
    }
  }
}

//- 範例
// 使用 bp mixin 來生成desktop media query
@include bp('pc') {
  // 在desktop下應用以下樣式
  .header {
    background-color: #333;
  }
}

// 使用 bp mixin 來生成mobile media query
@include bp('mb') {
  // 在mobile下應用以下樣式
  .mobile-menu {
    display: block;
  }
}

//-產出CSS
@media (max-width: 1023px) {
  .header {
    background-color: #333;
  }
}
@media (max-width: 767px) {
  .mobile-menu {
    display: block;
  }
}  

// 定義一個名為 ie-only 的 Sass mixin，用於僅在IE瀏覽器下應用樣式
@mixin ie-only {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

//- 範例
// 使用 ie-only mixin 來僅在IE瀏覽器下應用樣式
@include ie-only {
  // 在IE瀏覽器下應用以下樣式
  .legacy-element {
    display: block;
  }
}
//-產出CSS
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
  .legacy-element {
    display: block;
  }
}

// 定義一個名為 edge-only 的 Sass mixin，用於僅在Edge瀏覽器下應用樣式
@mixin edge-only {
  @supports (-ms-ime-align: auto) {
    @content;
  }
}

//- 範例
// 使用 edge-only mixin 來僅在Edge瀏覽器下應用樣式
@include edge-only {
  // 在Edge瀏覽器下應用以下樣式
  .edge-element {
    border: 2px solid #0078d4;
  }
}
// 產出CSS
@media screen and (-ms-ime-align:auto) {
  .edge-element {
    border: 2px solid #0078d4;
  }
}

// 定義一個名為 size 的 mixin，用於設置元素的寬度和高度
@mixin size($w: null, $h: $w) {
  width: $w;
  height: $h;
}

//- 範例
// 使用 size mixin 設置元素的寬度和高度
.element {
  @include size(100px, 50px); // 設置寬度為100px，高度為50px
}
//-產出CSS
.element {
  width: 100px;
  height: 50px;
}

// 定義一個名為 flex-center 的 mixin，用於使元素垂直水平居中對齊
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

//- 範例
// 使用 flex-center mixin 使元素垂直水平居中對齊
.container {
  @include flex-center;
}
//- 產出CSS：
.container {
  display: flex;
  justify-content: center;
  align-items: center;
}

// 定義一個名為 flex-separate 的 mixin，用於使元素之間有間隔的 flex 佈局
@mixin flex-separate {
  display: flex;
  justify-content: space-between;
}

//- 範例
// 使用 flex-separate mixin 使元素之間有間隔的 flex 佈局
.row {
  @include flex-separate;
}
// 產出以下CSS
.row {
  display: flex;
  justify-content: space-between;
}

// 定義一個名為 media-all 的 mixin，用於在不同 breakpoint 下應用樣式
@mixin media-all($dash: 1) {
  @content;
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include breakpoint($breakpoint) {
      @if($dash == 1) {
        &-#{$breakpoint} {
          @content;
        }
      } @else if ($dash == 2) {
        &-#{$breakpoint} {
          @content;
        }
      }
    }
  }
}
//- 範例
// 使用 media-all mixin 在不同 breakpoint 下應用樣式
.hide {
  display: none;
  @include media-all {
    display: none;
  }
}
//-結果會產出以下內容
.hide {
  display: none;
}

@media (max-width: 575px) {
  .hide-sm {
    display: none;
  }
}

@media (max-width: 767px) {
  .hide-md {
    display: none;
  }
}

@media (max-width: 1023px) {
  .hide-lg {
    display: none;
  }
}

@media (max-width: 1259px) {
  .hide-xl {
    display: none;
  }
}

@media (max-width: 1399px) {
  .hide-xxl {
    display: none;
  }
}


// 定義一個名為 posXY 的 mixin，用於設置元素的左側和頂部位置
@mixin posXY($x: 0, $y: 0) {
  left: calc(50% + #{$x}px);
  top: xy($y, $h);
}

// 使用 posXY mixin 設置元素的左側和頂部位置
.element {
  @include posXY(10px, 20);
}
// 產出CSS
.element {
  left: calc(50% + 10px);
  top: 20%;
}

// 定義一個名為 shadow 的 mixin，用於設置元素的陰影效果
@mixin shadow {
  box-shadow: 7px 7px 5px rgba(black, 0.25);

  @media (max-width: #{$mblrwd-breakpoint + 'px'}) {
    box-shadow: vwm(7px) vwm(7px) vwm(5px) rgba(black, 0.25);
  }
}

// 使用 shadow mixin 設置元素的陰影效果
.element {
  @include shadow;
}

// 產出CSS
.element {
  box-shadow: 7px 7px 5px rgba(black, 0.25);
}

@media (max-width: 768px) {
  .element {
    box-shadow: 7px 7px 5px rgba(black, 0.25);
  }
}